{"version":3,"sources":["components/HamburgerApp/index.js","components/HamburgerApp/HamburgerApp.js","components/Hamburger/index.js","components/Hamburger/Hamburger.js","constants/malzemeler.js","components/Ingredients/index.js","components/Ingredients/Ingredients.js","components/TotalPrice/index.js","components/TotalPrice/TotalPrice.js","App.js","serviceWorker.js","index.js"],"names":["HamburgerApp","props","malzemeEkle","malzeme","state","secilenMalzemeler","find","secilenMalzeme","id","setState","map","count","malzemeCikar","secilen","filter","total","reduce","price","totalPrice","this","Component","Hamburger","className","style","height","elements","malzemeDivi","key","backgroundColor","color","width","margin","marginTop","borderRadius","name","i","push","malzemeler","Ingredients","azaltButonunuGoster","onClick","classnames","TotalPrice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8e4fca3.chunk.js","sourcesContent":["import HamburgerApp from \"./HamburgerApp\";\n\nexport default HamburgerApp;","import React, { Component } from 'react';\nimport \"./styles.css\";\nimport { Hamburger } from \"../../components\";\nimport { Ingredients } from '../../components';\nimport { TotalPrice } from \"../../components\";\n\n\n\nclass HamburgerApp extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            secilenMalzemeler: [],\n            totalPrice: 0,\n        }\n    }\n\n    malzemeEkle = (malzeme) => {\n        // var mi yok mu kontrol ediyoruz\n        const varMi = this.state.secilenMalzemeler.find((secilenMalzeme) => secilenMalzeme.id === malzeme.id);\n        // var ise sayisini artircaz, yok ise arraye ekliyoruz\n        //console.log(\"var mi yok mu\", varMi);\n        if (varMi) {\n            this.setState({\n                secilenMalzemeler: this.state.secilenMalzemeler.map((secilenMalzeme) => {\n                    if (secilenMalzeme.id === malzeme.id) {\n                        return { ...secilenMalzeme, count: secilenMalzeme.count + 1 }\n                    } else {\n                        return secilenMalzeme;\n                    }\n                })\n            })\n        } else {\n            this.setState({\n                secilenMalzemeler: [...this.state.secilenMalzemeler, { ...malzeme, count: 1 }]\n            })\n        }\n    }\n\n    malzemeCikar = (malzeme) => {\n        /// olmadigi durumda azalta hic basilamayacagi icin bu satirda malzemenin secili olduguna eminim.\n        const secilenMalzeme = this.state.secilenMalzemeler.find((secilen) => secilen.id === malzeme.id);\n        const secilenMalzemeCount = secilenMalzeme.count;\n        // sayi 1 ise secilenlerden tamamen cikartiyorum, 1 den buyuk ise bu sayiyi azaltiyorum\n        if (secilenMalzemeCount > 1) {\n            this.setState({\n                secilenMalzemeler: this.state.secilenMalzemeler.map((secilen) => {\n                    if (secilen.id === malzeme.id) {\n                        return { ...secilen, count: secilen.count - 1 }\n                    }\n                    return secilen;\n                })\n            })\n        } else {\n            this.setState({\n                secilenMalzemeler: this.state.secilenMalzemeler.filter((secilen) => {\n                    return secilen.id !== malzeme.id\n                })\n            })\n        }\n    }\n\n\n\n    total = () => {\n        /* let totals = 0;\n        this.state.secilenMalzemeler.forEach((malzeme) => {\n             totals += malzeme.price * malzeme.count\n        });\n         return totals; */\n        const total = this.state.secilenMalzemeler.reduce((total, malzeme) => {\n            return total + malzeme.price * malzeme.count;\n        }, 0)\n        return total\n\n    }\n\n    render() {\n        const { secilenMalzemeler } = this.state;\n        return (\n            <div>\n                <Hamburger secilenMalzemeler={secilenMalzemeler} />\n                <Ingredients\n                    secilenMalzemeler={secilenMalzemeler}\n                    malzemeEkle={this.malzemeEkle}\n                    malzemeCikar={this.malzemeCikar}\n                />\n                <TotalPrice total={this.total} />\n            </div>\n        );\n    }\n}\n\nexport default HamburgerApp;","import Hamburger from \"./Hamburger\";\n\nexport default Hamburger;\n","import React from 'react';\nimport \"./styles.css\";\n\n\nconst Hamburger = ({secilenMalzemeler}) => {\n    // Kapsayici icin React fragment kullaniyoruz.\n    return (\n        <>\n            <div>\n                <div className=\"BreadTop\" style={{\n                    height: \"100px\"\n                }} />\n                {\n                    secilenMalzemeler.map((malzeme) => {\n                        const elements = [];\n                        const malzemeDivi = <div\n                            key={malzeme.id}\n                            style={{\n                                height: \"20px\",\n                                backgroundColor: malzeme.color,\n                                width: \"30%\",\n                                margin: \"0 auto\",\n                                marginTop: \"5px\",\n                                borderRadius:\"20px\"\n                            }}\n                        >\n                            <p>{malzeme.name} and {malzeme.price}</p>\n                            {/* {malzeme.count} */}\n                        </div>;\n                        for(let i=0; i< malzeme.count;i++){\n                            elements.push(malzemeDivi);\n                        }\n                        return elements;\n                    })\n                }\n                <div className=\"BreadBottom\" style={{\n                    height: \"50px\"\n                }}/>\n                \n            </div>\n            \n        </>\n    );\n};\n\nexport default Hamburger;","const malzemeler = [\n    {\n        id: 1,\n        name: \"Marul\",\n        color: \"green\",\n        price: 1,\n        count: 0\n    },\n    {\n        id: 2,\n        name: \"Peynir\",\n        color: \"#ffa600\",\n        price: 4,\n        count: 0\n    },\n    {\n        id: 3,\n        name: \"KÃ¶fte\",\n        color: \"black\",\n        price: 6,\n        count: 0\n    },\n    {\n        id: 4,\n        name: \"Domates\",\n        color: \"red\",\n        price: 2,\n        count: 0\n    }\n];\n\nexport default malzemeler;\n","import Ingredients from \"./Ingredients\";\n\nexport default Ingredients;","import React from 'react'\nimport \"./styles.css\"\nimport classnames from \"classnames\";\nimport malzemeler from \"../../constants/malzemeler\"\n\n\nconst Ingredients = ({ secilenMalzemeler, malzemeEkle, malzemeCikar }) => {\n    return (\n        <>\n            <div>\n                <h2>Eklenecek Malzemeler</h2>\n                <ul>\n                    {\n                        malzemeler.map((malzeme) => {\n                            // mazeleme seculi ise azalt butonu aktif, degilse disabled\n                            const azaltButonunuGoster = secilenMalzemeler.find((secilenMalzeme) => secilenMalzeme.id === malzeme.id)\n                            return <p key={malzeme.id}>\n                                <table>\n                                    <tbody>\n                                        <tr>\n                                            <td width=\"80px\">\n                                                <h3>\n                                                    {malzeme.name}\n                                                </h3>\n                                            </td>\n                                            <td>\n                                                <button onClick={() => {\n                                                    malzemeEkle(malzeme)\n                                                }} className=\"malzeme-ekle\">Ekle</button>\n                                            </td>\n                                            <td>\n                                                <button onClick={() => {\n                                                    malzemeCikar(malzeme)\n                                                }}\n                                                    className={classnames({\n                                                        \"malzeme-cikar\": true,\n                                                        \"disabled\": !azaltButonunuGoster,\n                                                        \"enabled\": azaltButonunuGoster\n                                                    })}>Azalt</button>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </p>\n                        })\n                    }\n                </ul>\n            </div>\n        </>\n    )\n}\n\nexport default Ingredients\n","import TotalPrice from \"./TotalPrice\"\n\nexport default TotalPrice","import React from 'react'\n\nconst TotalPrice = ({total}) => {\n    return (\n        <div>\n                <h3>Total Price: {total()}</h3>\n        </div>\n    )\n}\n\nexport default TotalPrice\n","import React from 'react';\nimport './App.css';\nimport {HamburgerApp} from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <HamburgerApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}